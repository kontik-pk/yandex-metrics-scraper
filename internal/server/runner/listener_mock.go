// Code generated by mockery. DO NOT EDIT.

package runner

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// mockListener is an autogenerated mock type for the listener type
type mockListener struct {
	mock.Mock
}

// Accept provides a mock function with given fields:
func (_m *mockListener) Accept() (net.Conn, error) {
	ret := _m.Called()

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func() (net.Conn, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Addr provides a mock function with given fields:
func (_m *mockListener) Addr() net.Addr {
	ret := _m.Called()

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *mockListener) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockListener interface {
	mock.TestingT
	Cleanup(func())
}

// newMockListener creates a new instance of mockListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockListener(t mockConstructorTestingTnewMockListener) *mockListener {
	mock := &mockListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
